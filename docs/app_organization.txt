Water Levels Monitoring Application - Organization Structure
=======================================================

1. Main Application Files
------------------------
- main.py: The main entry point of the application
- Requirements.txt: List of Python package dependencies
- setup.bat: Installation script for new users

2. Core Directories
------------------
/src/           - Contains the main source code
/tools/         - Utility scripts and tools
/config/        - Configuration files
/assets/        - Static assets (images, icons, etc.)

3. Data Management
-----------------
/imported_xle_files/    - Stores imported XLE data files
/Legacy_tables/         - Contains legacy database tables
/Previous_data/        - Historical data storage
/well_pictures/        - Well-related images and photos

4. Database and Data Files
-------------------------
- CAESER_GENERAL.db: Main SQLite database
- Well_info_2_with_toc.csv: Well information data
- monet_raw_data.csv: Raw monitoring data
- monet_data.csv: Processed monitoring data
- combined_well_measurements.csv: Combined measurements

5. Output and Temporary Files
---------------------------
/temp_map.html         - Temporary map output
/app.log              - Application log file
/baseline_dialog.log  - Baseline dialog logs
/last_run/            - Last run information
/missing_xle_files/   - Tracking of missing files
/new_xle_files/       - Newly imported files

6. Build and Distribution
------------------------
/dist/               - Distribution files
/WaterLevels.spec    - PyInstaller specification
/Water Levels Monitoring.spec: Alternative spec file

7. Development
-------------
/.spyproject/        - Spyder IDE project files
/__pycache__/        - Python cache files
/__init__.py         - Python package initialization

8. User-Specific
---------------
%USERPROFILE%\WaterLevelsApp\  - User's personal launcher
%APPDATA%\WaterLevelsEnv\      - User's Python environment

Key Features:
------------
1. Modular Design:
   - Source code organized in /src/
   - Tools separated in /tools/
   - Configuration isolated in /config/

2. Data Organization:
   - Clear separation of raw and processed data
   - Dedicated directories for different data types
   - Legacy data preservation

3. User Management:
   - Personal environments per user
   - Shared data access
   - Individual launchers

4. Logging and Monitoring:
   - Comprehensive logging system
   - Run tracking
   - Error monitoring

5. File Management:
   - Organized import/export structure
   - Clear separation of temporary and permanent files
   - Backup and historical data preservation

Note: This organization allows for:
- Easy updates to shared code
- Individual user configurations
- Clear separation of concerns
- Efficient data management
- Scalable development 