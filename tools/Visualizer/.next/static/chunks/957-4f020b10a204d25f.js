(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[957],{803:function(){},336:function(e,t,a){"use strict";a.d(t,{T:function(){return l}});var n=a(7437);function l(e){let{size:t="medium",className:a=""}=e;return(0,n.jsx)("div",{className:"loading-spinner ".concat({small:"w-4 h-4",medium:"w-8 h-8",large:"w-12 h-12"}[t]," ").concat(a)})}},880:function(e,t,a){"use strict";a.d(t,{TD:function(){return o},f4:function(){return c}});var n=a(919),l=a.n(n);let r=null;async function i(){if(!r)try{r=await l()({locateFile:e=>"https://sql.js.org/dist/".concat(e)})}catch(e){throw console.error("Failed to initialize sql.js:",e),Error("Database initialization failed")}}class o{async initialize(){if(!this.initialized){if(await i(),!r)throw Error("SQL.js not initialized");try{this.db=new r.Database(new Uint8Array(this.arrayBuffer)),this.initialized=!0,await this.validateSchema()}catch(e){throw console.error("Failed to open database:",e),Error("Invalid database file")}}}async validateSchema(){if(!this.db)throw Error("Database not initialized");let e=this.db.prepare('SELECT name FROM sqlite_master WHERE type="table"'),t=[];for(;e.step();){let a=e.getAsObject();t.push(a.name)}for(let a of(e.free(),["wells","water_level_readings"]))if(!t.includes(a))throw Error("Required table '".concat(a,"' not found in database"))}async getWells(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!this.db)throw Error("Database not initialized");let{search:t="",field:a="",hasData:n,page:l=1,limit:r=50,sortBy:i="well_number",sortOrder:o="asc"}=e,d="\n      SELECT \n        w.*,\n        COUNT(wlr.id) as total_readings,\n        MAX(wlr.timestamp_utc) as last_reading_date,\n        CASE WHEN COUNT(mr.id) > 0 THEN 1 ELSE 0 END as has_manual_readings,\n        CASE WHEN COUNT(wlr.id) > 0 THEN 1 ELSE 0 END as has_transducer_data\n      FROM wells w\n      LEFT JOIN water_level_readings wlr ON w.well_number = wlr.well_number\n      LEFT JOIN manual_readings mr ON w.well_number = mr.well_number\n      WHERE 1=1\n    ",c=[];if(t){d+=" AND (w.well_number LIKE ? OR w.cae_number LIKE ? OR w.well_field LIKE ?)";let e="%".concat(t,"%");c.push(e,e,e)}a&&(d+=" AND w.well_field = ?",c.push(a)),void 0!==n&&(n?d+=" AND COUNT(wlr.id) > 0":d+=" AND COUNT(wlr.id) = 0"),d+=" GROUP BY w.well_number",["well_number","cae_number","last_reading_date"].includes(i)&&(d+=" ORDER BY ".concat(i," ").concat(o.toUpperCase())),d+=" LIMIT ? OFFSET ?",c.push(r,(l-1)*r);try{let e=this.db.prepare(d);e.bind(c);let n=[];for(;e.step();){let t=e.getAsObject();n.push(this.mapRowToWell(t))}e.free();let i="\n        SELECT COUNT(DISTINCT w.well_number) as total\n        FROM wells w\n        LEFT JOIN water_level_readings wlr ON w.well_number = wlr.well_number\n        WHERE 1=1\n      ",o=[];if(t){i+=" AND (w.well_number LIKE ? OR w.cae_number LIKE ? OR w.well_field LIKE ?)";let e="%".concat(t,"%");o.push(e,e,e)}a&&(i+=" AND w.well_field = ?",o.push(a));let s=this.db.prepare(i);s.bind(o),s.step();let u=s.getAsObject().total;return s.free(),{success:!0,data:n,pagination:{page:l,limit:r,total:u,totalPages:Math.ceil(u/r)}}}catch(e){throw console.error("Error fetching wells:",e),Error("Failed to fetch wells data")}}async getWell(e){if(!this.db)throw Error("Database not initialized");let t=this.db.prepare("\n      SELECT \n        w.*,\n        COUNT(wlr.id) as total_readings,\n        MAX(wlr.timestamp_utc) as last_reading_date,\n        CASE WHEN COUNT(mr.id) > 0 THEN 1 ELSE 0 END as has_manual_readings,\n        CASE WHEN COUNT(wlr.id) > 0 THEN 1 ELSE 0 END as has_transducer_data\n      FROM wells w\n      LEFT JOIN water_level_readings wlr ON w.well_number = wlr.well_number\n      LEFT JOIN manual_readings mr ON w.well_number = mr.well_number\n      WHERE w.well_number = ?\n      GROUP BY w.well_number\n    ");if(t.bind([e]),t.step()){let e=t.getAsObject();return t.free(),this.mapRowToWell(e)}return t.free(),null}async getWaterLevelData(e){if(!this.db)throw Error("Database not initialized");let{wellNumber:t,startDate:a,endDate:n,dataType:l="all",downsample:r=!1,maxPoints:i=1e3}=e,o="\n      SELECT \n        id,\n        well_number,\n        timestamp_utc,\n        julian_timestamp,\n        water_level,\n        temperature,\n        dtw,\n        'transducer' as data_source,\n        baro_flag,\n        level_flag\n      FROM water_level_readings\n      WHERE well_number = ?\n    ",d=[t];a&&(o+=" AND timestamp_utc >= ?",d.push(a)),n&&(o+=" AND timestamp_utc <= ?",d.push(n)),("all"===l||"manual"===l)&&(o+=" UNION ALL\n        SELECT \n          id,\n          well_number,\n          timestamp_utc,\n          julian_timestamp,\n          water_level,\n          NULL as temperature,\n          dtw,\n          'manual' as data_source,\n          NULL as baro_flag,\n          NULL as level_flag\n        FROM manual_readings\n        WHERE well_number = ?\n      ",d.push(t),a&&(o+=" AND timestamp_utc >= ?",d.push(a)),n&&(o+=" AND timestamp_utc <= ?",d.push(n))),o+=" ORDER BY timestamp_utc";try{let e=this.db.prepare(o);e.bind(d);let t=[];for(;e.step();){let a=e.getAsObject();t.push(this.mapRowToReading(a))}if(e.free(),r&&t.length>i)return this.downsampleData(t,i);return t}catch(e){throw console.error("Error fetching water level data:",e),Error("Failed to fetch water level data")}}async getRechargeResults(e){if(!this.db)throw Error("Database not initialized");let t=this.db.prepare("\n      SELECT name FROM sqlite_master \n      WHERE type='table' AND name IN ('rise_results', 'mrc_results', 'emr_results')\n    "),a=[];for(;t.step();){let e=t.getAsObject();a.push(e.name)}if(t.free(),0===a.length)return[];let n=[];for(let t of a){let a=t.replace("_results","").toUpperCase();try{let l=this.db.prepare("\n          SELECT * FROM ".concat(t,"\n          WHERE well_number = ?\n          ORDER BY calculation_date DESC\n        "));for(l.bind([e]);l.step();){let e=l.getAsObject();n.push({...e,method:a,calculation_parameters:e.calculation_parameters?JSON.parse(e.calculation_parameters):void 0})}l.free()}catch(e){console.error("Error querying ".concat(t,":"),e)}}return n}mapRowToWell(e){return{well_number:e.well_number,cae_number:e.cae_number,well_field:e.well_field,cluster:e.cluster,latitude:e.latitude,longitude:e.longitude,top_of_casing:e.top_of_casing,ground_elevation:e.ground_elevation,well_depth:e.well_depth,screen_top:e.screen_top,screen_bottom:e.screen_bottom,aquifer_type:e.aquifer_type,static_water_level:e.static_water_level,notes:e.notes,last_reading_date:e.last_reading_date,total_readings:e.total_readings||0,has_manual_readings:!!e.has_manual_readings,has_transducer_data:!!e.has_transducer_data,has_telemetry_data:!!e.has_telemetry_data}}mapRowToReading(e){return{id:e.id,well_number:e.well_number,timestamp_utc:e.timestamp_utc,julian_timestamp:e.julian_timestamp,water_level:e.water_level,temperature:e.temperature,dtw:e.dtw,data_source:e.data_source,baro_flag:e.baro_flag,level_flag:e.level_flag,notes:e.notes}}downsampleData(e,t){if(e.length<=t)return e;let a=Math.floor(e.length/t),n=[];for(let t=0;t<e.length;t+=a)n.push(e[t]);return n[n.length-1]!==e[e.length-1]&&n.push(e[e.length-1]),n}close(){this.db&&(this.db.close(),this.db=null,this.initialized=!1)}constructor(e){this.arrayBuffer=e,this.db=null,this.initialized=!1}}class d{async loadDatabase(e,t){let a=new o(t);return await a.initialize(),this.databases.set(e,a),a}getDatabase(e){return this.databases.get(e)||null}closeDatabase(e){let t=this.databases.get(e);t&&(t.close(),this.databases.delete(e))}closeAllDatabases(){for(let[e,t]of this.databases)t.close();this.databases.clear()}constructor(){this.databases=new Map}}let c=new d},2911:function(e,t,a){"use strict";function n(e,t,a){if(0===e.length)throw Error("No data to export");let n=e.map(e=>{var t,a;return[e.timestamp_utc,(null===(t=e.water_level)||void 0===t?void 0:t.toString())||"",(null===(a=e.temperature)||void 0===a?void 0:a.toString())||"",e.data_source||"",e.level_flag||""]});d(["# Water Level Data Export","# Well: ".concat(t.well_number),t.cae_number?"# CAE Number: ".concat(t.cae_number):"",t.well_field?"# Field: ".concat(t.well_field):"","# Export Date: ".concat(new Date().toISOString()),"# Total Records: ".concat(e.length),"","Date/Time,Water Level (ft),Temperature (\xb0C),Data Type,Quality",...n.map(e=>e.join(","))].filter(e=>""!==e).join("\n"),a||"water_level_data_".concat(t.well_number,"_").concat(new Date().toISOString().split("T")[0],".csv"),"text/csv")}function l(e,t,a){if(0===e.length)throw Error("No data to export");d(JSON.stringify({metadata:{well_number:t.well_number,cae_number:t.cae_number,well_field:t.well_field,latitude:t.latitude,longitude:t.longitude,ground_elevation:t.ground_elevation,export_date:new Date().toISOString(),total_records:e.length},data:e.map(e=>({datetime:e.timestamp_utc,water_level_ft:e.water_level,temperature_c:e.temperature,data_source:e.data_source,level_flag:e.level_flag}))},null,2),a||"water_level_data_".concat(t.well_number,"_").concat(new Date().toISOString().split("T")[0],".json"),"application/json")}function r(e,t,a){if(0===e.length)throw Error("No recharge results to export");let n=e.map(e=>{var t,a,n;return[e.method,e.calculation_date,e.start_date,e.end_date,(null===(t=e.recharge_mm)||void 0===t?void 0:t.toString())||"",(null===(a=e.recharge_inches)||void 0===a?void 0:a.toString())||"",(null===(n=e.specific_yield)||void 0===n?void 0:n.toString())||"",e.notes||""]});d(["# Recharge Results Export","# Well: ".concat(t.well_number),t.cae_number?"# CAE Number: ".concat(t.cae_number):"",t.well_field?"# Field: ".concat(t.well_field):"","# Export Date: ".concat(new Date().toISOString()),"# Total Calculations: ".concat(e.length),"","Method,Calculation Date,Start Date,End Date,Recharge (mm),Recharge (inches),Specific Yield,Notes",...n.map(e=>e.join(","))].filter(e=>""!==e).join("\n"),a||"recharge_results_".concat(t.well_number,"_").concat(new Date().toISOString().split("T")[0],".csv"),"text/csv")}function i(e,t,a){if(0===e.length)throw Error("No recharge results to export");d(JSON.stringify({metadata:{well_number:t.well_number,cae_number:t.cae_number,well_field:t.well_field,latitude:t.latitude,longitude:t.longitude,export_date:new Date().toISOString(),total_calculations:e.length},recharge_results:e.map(e=>({method:e.method,calculation_date:e.calculation_date,period:{start_date:e.start_date,end_date:e.end_date},recharge:{mm:e.recharge_mm,inches:e.recharge_inches},specific_yield:e.specific_yield,notes:e.notes}))},null,2),a||"recharge_results_".concat(t.well_number,"_").concat(new Date().toISOString().split("T")[0],".json"),"application/json")}function o(e,t,a){if(0===e.length)throw Error("No recharge results to export");let n=function(e,t){let a=e.reduce((e,t)=>(e[t.method]||(e[t.method]=[]),e[t.method].push(t),e),{}),n={RISE:"Recharge Investigation and Simulation Tool - automated water table fluctuation method",MRC:"Manual Recharge Calculation - user-defined parameters and periods",EMR:"Enhanced Manual Recharge - advanced manual calculation with additional parameters"};return'\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Recharge Results Report - Well '.concat(t.well_number,'</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }\n        .header { border-bottom: 2px solid #ccc; padding-bottom: 20px; margin-bottom: 30px; }\n        .header h1 { margin: 0; color: #2563eb; }\n        .metadata { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin: 20px 0; }\n        .metadata dt { font-weight: bold; }\n        .method-section { margin: 30px 0; page-break-inside: avoid; }\n        .method-title { background: #f3f4f6; padding: 10px; border-left: 4px solid #2563eb; }\n        table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f9fafb; font-weight: 600; }\n        .summary { background: #f0f9ff; padding: 15px; border-radius: 6px; margin: 20px 0; }\n        @media print { body { margin: 0; } .no-print { display: none; } }\n    </style>\n</head>\n<body>\n    <div class="header">\n        <h1>Recharge Results Report</h1>\n        <h2>Well ').concat(t.well_number,'</h2>\n        <div class="metadata">\n            ').concat(t.cae_number?"<div><dt>CAE Number:</dt><dd>".concat(t.cae_number,"</dd></div>"):"","\n            ").concat(t.well_field?"<div><dt>Field:</dt><dd>".concat(t.well_field,"</dd></div>"):"","\n            <div><dt>Export Date:</dt><dd>").concat(new Date().toLocaleDateString(),"</dd></div>\n            <div><dt>Total Calculations:</dt><dd>").concat(e.length,'</dd></div>\n        </div>\n    </div>\n\n    <div class="summary">\n        <h3>Summary</h3>\n        <p>This report contains ').concat(e.length," recharge calculations for well ").concat(t.well_number," using ").concat(Object.keys(a).length," different methods.</p>\n    </div>\n\n    ").concat(Object.entries(a).map(e=>{let[t,a]=e;return'\n    <div class="method-section">\n        <div class="method-title">\n            <h3>'.concat(t," Method (").concat(a.length,' calculations)</h3>\n            <p style="margin: 5px 0; font-size: 14px; color: #666;">').concat(n[t]||"Unknown method","</p>\n        </div>\n        \n        <table>\n            <thead>\n                <tr>\n                    <th>Calculation Date</th>\n                    <th>Period</th>\n                    <th>Recharge (mm)</th>\n                    <th>Recharge (in)</th>\n                    <th>Specific Yield</th>\n                </tr>\n            </thead>\n            <tbody>\n                ").concat(a.sort((e,t)=>new Date(t.calculation_date).getTime()-new Date(e.calculation_date).getTime()).map(e=>{var t,a,n;return"\n                <tr>\n                    <td>".concat(new Date(e.calculation_date).toLocaleDateString(),"</td>\n                    <td>").concat(new Date(e.start_date).toLocaleDateString()," - ").concat(new Date(e.end_date).toLocaleDateString(),"</td>\n                    <td>").concat((null===(t=e.recharge_mm)||void 0===t?void 0:t.toFixed(2))||"—","</td>\n                    <td>").concat((null===(a=e.recharge_inches)||void 0===a?void 0:a.toFixed(3))||"—","</td>\n                    <td>").concat((null===(n=e.specific_yield)||void 0===n?void 0:n.toFixed(3))||"—","</td>\n                </tr>\n                ")}).join(""),"\n            </tbody>\n        </table>\n    </div>\n    ")}).join(""),'\n\n    <div class="no-print" style="margin-top: 40px; text-align: center;">\n        <button onclick="window.print()" style="padding: 10px 20px; background: #2563eb; color: white; border: none; border-radius: 4px; cursor: pointer;">\n            Print Report\n        </button>\n    </div>\n</body>\n</html>\n  ')}(e,t);d(n,a||"recharge_report_".concat(t.well_number,"_").concat(new Date().toISOString().split("T")[0],".html"),"text/html");let l=window.open("","_blank");l&&(l.document.write(n),l.document.close(),l.focus())}function d(e,t,a){let n=new Blob([e],{type:a}),l=URL.createObjectURL(n),r=document.createElement("a");r.href=l,r.download=t,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(l)}function c(e,t,a){return t||a?e.filter(e=>{let n=new Date(e.timestamp_utc),l=new Date(t||0),r=a?new Date(a):new Date;return n>=l&&n<=r}):e}a.d(t,{Kj:function(){return i},OV:function(){return r},Sz:function(){return l},_W:function(){return o},cv:function(){return c},h:function(){return n}})}}]);